openapi: 3.1.0
info:
  title: Alpaca Trading & Market Data (Direct)
  version: "1.0.0"
servers:
  - url: https://api.alpaca.markets
    description: Live Trading API
  - url: https://paper-api.alpaca.markets
    description: Paper Trading API
security:
  - APCAKeyID: []
    APCASecretKey: []
paths:
  /v2/orders:
    post:
      summary: Submit a new order
      operationId: submitOrder
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/OrderIn" }
      responses:
        "201": { description: Order created }
    get:
      summary: List orders
      operationId: listOrders
      parameters:
        - name: status
          in: query
          required: false
          schema: { type: string, default: open }
      responses:
        "200": { description: Orders list }
  /v2/orders/{order_id}:
    get:
      summary: Get order by ID
      operationId: getOrderById
      parameters:
        - { name: order_id, in: path, required: true, schema: { type: string } }
      responses:
        "200": { description: Order detail }
    delete:
      summary: Cancel order
      operationId: cancelOrderById
      parameters:
        - { name: order_id, in: path, required: true, schema: { type: string } }
      responses:
        "204": { description: Order cancelled }
  /v2/account:
    get:
      summary: Get account details
      operationId: getAccount
      responses:
        "200": { description: Account info }
  /v2/positions:
    get:
      summary: List open positions
      operationId: listPositions
      responses:
        "200": { description: Positions list }
    delete:
      summary: Close all positions
      operationId: closeAllPositions
      parameters:
        - { name: cancel_orders, in: query, required: false, schema: { type: boolean, default: false } }
      responses:
        "200": { description: Positions closed }
  /v2/positions/{symbol}:
    get:
      summary: Get position
      operationId: getPosition
      parameters:
        - { name: symbol, in: path, required: true, schema: { type: string } }
      responses:
        "200": { description: Position detail }
    delete:
      summary: Close position
      operationId: closePosition
      parameters:
        - { name: symbol, in: path, required: true, schema: { type: string } }
        - { name: cancel_orders, in: query, required: false, schema: { type: boolean, default: false } }
      responses:
        "200": { description: Position closed }
  /v2/watchlists:
    get:
      summary: List watchlists
      operationId: listWatchlists
      responses:
        "200": { description: Watchlists list }
    post:
      summary: Create watchlist
      operationId: createWatchlist
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/WatchlistIn" }
      responses:
        "200": { description: Watchlist created }
  /v2/watchlists/{watchlist_id}:
    get:
      summary: Get watchlist
      operationId: getWatchlist
      parameters:
        - { name: watchlist_id, in: path, required: true, schema: { type: string } }
      responses:
        "200": { description: Watchlist detail }
    put:
      summary: Update watchlist
      operationId: updateWatchlist
      parameters:
        - { name: watchlist_id, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/WatchlistIn" }
      responses:
        "200": { description: Watchlist updated }
    delete:
      summary: Delete watchlist
      operationId: deleteWatchlist
      parameters:
        - { name: watchlist_id, in: path, required: true, schema: { type: string } }
      responses:
        "200": { description: Watchlist deleted }
  /v2/stocks/{symbol}/bars:
    servers: [{ url: https://data.alpaca.markets }]
    get:
      summary: Get historical bars
      operationId: getBars
      parameters:
        - { name: symbol, in: path, required: true, schema: { type: string } }
        - { name: timeframe, in: query, required: true, schema: { type: string, example: "1Day" } }
        - { name: start, in: query, required: true, schema: { type: string, format: date-time } }
        - { name: end, in: query, required: false, schema: { type: string, format: date-time } }
        - { name: limit, in: query, required: false, schema: { type: integer, minimum: 1, maximum: 10000 } }
      responses:
        "200": { description: Bars list }
  /v2/stocks/{symbol}/quotes:
    servers: [{ url: https://data.alpaca.markets }]
    get:
      summary: Get historical quotes
      operationId: getQuotes
      parameters:
        - { name: symbol, in: path, required: true, schema: { type: string } }
        - { name: start, in: query, required: true, schema: { type: string, format: date-time } }
        - { name: end, in: query, required: true, schema: { type: string, format: date-time } }
        - { name: limit, in: query, required: false, schema: { type: integer, minimum: 1, maximum: 10000 } }
      responses:
        "200": { description: Quotes list }
  /v2/stocks/{symbol}/trades:
    servers: [{ url: https://data.alpaca.markets }]
    get:
      summary: Get historical trades
      operationId: getTrades
      parameters:
        - { name: symbol, in: path, required: true, schema: { type: string } }
        - { name: start, in: query, required: true, schema: { type: string, format: date-time } }
        - { name: end, in: query, required: true, schema: { type: string, format: date-time } }
        - { name: limit, in: query, required: false, schema: { type: integer, minimum: 1, maximum: 10000 } }
      responses:
        "200": { description: Trades list }
components:
  securitySchemes:
    APCAKeyID:
      type: apiKey
      in: header
      name: APCA-API-KEY-ID
    APCASecretKey:
      type: apiKey
      in: header
      name: APCA-API-SECRET-KEY
  schemas:
    OrderIn:
      type: object
      required: [symbol, side, type, time_in_force]
      properties:
        symbol: { type: string }
        side: { type: string, enum: [buy, sell] }
        qty: { type: number }
        notional: { type: number }
        type: { type: string, enum: [market, limit, stop, stop_limit] }
        time_in_force: { type: string }
        limit_price: { type: number }
    WatchlistIn:
      type: object
      required: [name, symbols]
      properties:
        name: { type: string }
        symbols:
          type: array
          items: { type: string }
